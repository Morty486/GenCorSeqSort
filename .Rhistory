for (j in (i + 1):nrow(cor_mat)) {
name = rbind(name, c(i, j))
lowbdd_vec = c(lowbdd_vec, low_bdd[i,j])
upbdd_vec = c(upbdd_vec, up_bdd[i,j])
}
}
r = order(prop_vec)
srt_pv = prop_vec[r]
srt_name = name[r, ]
ord = CorOrder.ToVar(srt_name)
srt_lst = lst[ord]
srt_low_bdd = lowbdd_vec[r]
srt_up_bdd = upbdd_vec[r]
srt_cor = sapply(1:length(ord), function(i){cor_mat[srt_name[i, 1], srt_name[i, 2]]})
srt_lst = lst[ord]
l = list(ord, srt_lst, srt_low_bdd, srt_up_bdd, srt_name, srt_pv, srt_cor)
names(l) = c("order", "ordered list", "ordered lower bounds", "ordered upper bounds","names of ordered correlation", "ordered proportion vectors",
"ordered correlations")
l
}
Find.Order(list(f1, f1, f1), cor_mat)
View(cor_mat)
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order()
ord = l[[1]]
srt_lst = l[[2]]
low_bdd = l[[3]]
up_bdd = l[[4]]
srt_name = l[[5]]
srt_pt = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
f1 = function(n){rnorm(n)}
cor_mat = matrix(c(1,.49,.1, .49, 1, -.4, .1, -.4, 1), nrow = 3)
GenCorData(10^5, list(f1,f1,f1), cor_mat)
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
low_bdd = l[[3]]
up_bdd = l[[4]]
srt_name = l[[5]]
srt_pt = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
low_bdd = l[[3]]
up_bdd = l[[4]]
srt_name = l[[5]]
srt_pt = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorData(10^5, list(f1,f1,f1), cor_mat)
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
low_bdd = l[[3]]
up_bdd = l[[4]]
srt_name = l[[5]]
srt_pv = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
low_bdd = l[[3]]
up_bdd = l[[4]]
srt_name = l[[5]]
srt_pv = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorData(10^5, list(f1,f1,f1), cor_mat)
GenCorData = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
srt_low_bdd = l[[3]]
srt_up_bdd = l[[4]]
srt_name = l[[5]]
srt_pv = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorData(10^5, list(f1,f1,f1), cor_mat)
Find.Order(list(f1, f1, f1), cor_mat)
library(devtools)
library(roxygen2)
document()
check()
library(GenCorSeqSort)
library(GenCorSeqSort)
library(devtools)
library(roxygen2)
check()
library(devtools)
library(roxygen2)
document()
build_manual()
library(GenCorSeqSort)
library(devtools)
document()
build_manual()
document()
build_manual()
library(devtools)
library(roxygen2)
?build_manual
library(GenCorSeqSort)
build_manual()
a = 1
save(a, "1.rda")
save(a, "./1.rda")
save(a, file = "./1.rda")
load("./1.rda")
b = load("./1.rda")
b
?save
x <- stats::runif(20)
y <- list(a = 1, b = TRUE, c = "oops")
save(x, y, file = "xy.RData")
a = load("./xy.RData")
a
a$x
f1 = function(n){rnorm(n)}
cor_mat = matrix(c(1,.49,.1, .49, 1, -.4, .1, -.4, 1), nrow = 3)
GenCorData(10^5, list(f1,f1,f1), cor_mat)
GenCorDataBiTri(100,list(f1,f1,f1), cor_mat)
GenCorDataBiTri = function(n, lst, cor_mat) {
if (!(length(lst) == 2 || length(lst) == 3)) {
stop("This sorting method only can be applied to 2 or 3 variables")
}
if (!nrow(cor_mat) == length(lst)) {
stop("Dimension of correlation matrix does not match the number of variables! \n")
}
pairbounds = Compute.PairBounds(lst)
Validate.Correlation(cor_mat, pairbounds)
prop_vec = Compute.SortProp(cor_mat, pairbounds)
if (length(lst) == 2) {
n_sort = floor(n*prop_vec)
sim = sapply(lst, function(a){a(n)})
if (cor_mat[upper.tri(cor_mat)] > 0) {
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = sort(sim[, 1][1:n_sort])
} else{
sim[, 1][1:n_sort] = sort(sim[, 1][1:n_sort])
sim[, 2][1:n_sort] = rev(sort(sim[, 1][1:n_sort]))
}
}
if (length(lst) == 3) {
l = Find.Order(lst, cor_mat)
ord = l[[1]]
srt_lst = l[[2]]
srt_low_bdd = l[[3]]
srt_up_bdd = l[[4]]
srt_name = l[[5]]
srt_pv = l[[6]]
srt_cor = l[[7]]
Check.TriBounds(srt_cor, srt_pv, srt_low_bdd, srt_up_bdd, ord)
sim = sapply(srt_lst, function(a){a(n)})
s1 = srt_cor[1]*srt_cor[2] > 0
s2 = srt_cor[3] < 0
s3 = abs(srt_low_bdd[3]) < srt_up_bdd[3]
n1 = floor(srt_pv[1]*n)
n2 = floor(srt_pv[2]*n)
if (all(s1,s2,s3) || all(!s1, !s2, !s3)) {
print("Sort without overlap")
n3 = floor(srt_pv[3]*n)
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], 1:n1, srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], (n1 + 1):(n1 + n2), srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n1 + n2 + 1):(n1 + n2+ n3), srt_cor[3])
}else{
print("Sort with overlap")
# The remain correlation need to achieve for the last one
rem = srt_cor[3] - srt_pv[1]*ifelse((srt_cor[1]*srt_cor[2] > 0), srt_up_bdd[3], srt_low_bdd[3])
n3 = ifelse(rem >= 0, floor(n*(rem/srt_up_bdd[3])), floor(n*(rem/srt_low_bdd[3])))
sim[, 2] = Rank.Sort(sim[, 1], sim[, 2], (1:n1), srt_cor[1])
sim[, 3] = Rank.Sort(sim[, 1], sim[, 3], 1:n2, srt_cor[2])
sim[, 3] = Rank.Sort(sim[, 2], sim[, 3], (n2 + 1):(n2 + n3), rem)
}
}
colnames(sim) = as.character(ord)
sim = sim[, order(colnames(sim))]
re = list(sim, round(cor(sim),4), round(cor_mat,4))
names(re) = c("sim_data", "gen_cor", "spec_cor")
re
}
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
setwd("~/Documents/UIC/Fall 2024/Computational Statistics/extra_info_3variate.sorting/Q1/Q1/GenCorSeqSort")
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
source("R/Compute.PairBounds.R")
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
setwd("~/Documents/UIC/Fall 2024/Computational Statistics/extra_info_3variate.sorting/Q1/Q1/GenCorSeqSort")
setwd("~/Documents/UIC/Fall 2024/Computational Statistics/extra_info_3variate.sorting/Q1/Q1/GenCorSeqSort/R")
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
setwd("~/Documents/UIC/Fall 2024/Computational_Statistics/extra_info_3variate.sorting/Q1/Q1/GenCorSeqSort")
setwd("~/Documents/UIC/Fall 2024/Computational Statistics/extra_info_3variate.sorting/Q1/Q1/GenCorSeqSort")
file_paths <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
lapply(file_paths, source)
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
install.packages("matrixcalc")
library(matrixcalc)
GenCorDataBiTri(10^5, list(f1,f1,f1), cor_mat)
f1 = function(n){rnorm(n)}
f2 = function(n){rpois(n,2)}
?rpois
f3 = function(n){runif(n)}
GenCorDataBiTri(10^5, list(f1,f2,f3), cor_mat)
cor_mat = matrix(c(1,0.1,-0.6, 0.1, 1, -0.4, -0.6, -0.4, 1), nrow = 3)
GenCorDataBiTri(10^5, list(f1,f2,f3), cor_mat)
GenCorDataBiTri
f1 = function(n){rnorm(n)}
f2 = function(n){rpois(n,1)}
f3 = function(n){rbinom(n,10,0.5)}
Compute.PairBounds(list(f1,f2,f3))
