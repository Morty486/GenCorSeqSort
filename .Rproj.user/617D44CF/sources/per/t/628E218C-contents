---
title: 'BSTT 565 HW #5'
author: "Hajwa Kim"
date: "November 22, 2020"
output:
  word_document: default
  html_document: default
---

## problem 1 

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q1_a.PNG)

#### Bayesian posterior distribution is $f(\mu|\bar{x}) = \frac{f(\bar{x}|\mu)*f(\mu)}{f(\bar{x})}$. Here the reciprocal of f($\bar{x}$) is called as 'normalizing constant' which is obtained by taking the reciprocal of integration of the product, f($\bar{x}$|$\mu$) and f($\mu$) with respect to $\mu$. In this example, the reciprocal of the normalizing constant is called as proportionality constant. Since most cases it is hard to do the integrations by analytic methods, computations using the numerical integration methods are needed. 

#### All three suggested integration methods, Reimann, Trapezoial and Simpson rules generates the same proportionality constant as 7.846538.

```{r 1a}

# Data
x = c(6.52, 8.32, 0.31, 2.82, 9.96, 0.14, 9.64)
x_bar = mean(x)


# Likelihood, f(xbar|mu)
f_likelihood <- function(mu) {
  1/(2*pi*9/7)^(1/2)*exp(-1/(2*9/7)*(x_bar-mu)^2) }

# Prior, f(mu)~ Cauchy (5.2)
f_mu <- function(mu) {
  1/(pi*2)*(4/((mu-5)^2+4))}

# Obtain f(x_bar|mu)*f(mu)
# Transforming mu into y to get finite limit of integral
# mu=log(y/(1-y))
# derivative of mu for dmu in integral = 1/((1-y)*y)

# f_y=f(x_bar|mu)*f(mu)*dmu to get the expected density of x_bar
f_y <- function(y) {
  f_likelihood(log(y/(1-y)))*f_mu(log(y/(1-y)))*(1/((1-y)*y))
}

# Riemann Rule
Riemann <- function (a,b,n=10^5,f) {
h= (b-a)/n
x=seq(a,b,by=h)
y=f(x)
I_R=sum(y[1:n])*h
return(I_R)
}

# Trapezoidal Rule
trapezoid = function(a, b, n = 10^5, f) {
  h = (b - a)/n
  x = seq(a, b, by = h)
  y = f(x)
  I_T = h/2 *(y[1] + y[n+1])+ h*(sum(y[2:n]))
  return(I_T)
}


# Simpson's Rule
Simpson = function(a, b, n= 10^5, f) {
  h = (b - a)/n
  x = seq(a, b, by = h)
  y = f(x)
  if (n == 2) {
    I_S = (h/3) * (y[1] + 4*y[2] + y[3])
  } else {
    I_S = (h/3) * (y[1] + 4*sum(y[seq(3, n-1, by = 2)])+ 2*sum(y[seq(2, n, by = 2)])+ y[n+1])
  }
  return(I_S)
}


k_Riemann = 1/Riemann(1e-10, 1 - 1e-10, f=f_y)
k_Trapezoid = 1/trapezoid(1e-10, 1 - 1e-10, f=f_y)
k_Simpson = 1/Simpson(1e-10, 1 - 1e-10, f=f_y)

data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(k_Riemann,k_Trapezoid,k_Simpson) )


```



![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q1_B.PNG)

#### All three integration methods could produce the estimate close to 0.99605 with large enough n. When n=50 and 100 the integration results are a little less as 0.995, and by increase it to 1000 the correct estimate was obtained.\

```{r 1b}

posterior <- function(mu) {f_likelihood(mu)*f_mu(mu)*k_Riemann}


# Riemann's Integral

Riemann <- function (a,b,n,f) {
h= (b-a)/n
x=seq(a,b,by=h)
y=f(x)
I_R=sum(y[1:n])*h
return(I_R)
}

# Trapezoid Rule
trapezoid = function(a, b, n , f) {
  h = (b - a)/n
  x = seq(a, b, by = h)
  y = f(x)
  I_T = h/2 *(y[1] + y[n+1])+ h*(sum(y[2:n]))
  return(I_T)
}


# Simpson Rule
Simpson = function(a, b, n, f) {
  h = (b - a)/n
  x = seq(a, b, by = h)
  y = f(x)
  if (n == 2) {
    I_S = (h/3) * (y[1] + 4*y[2] + y[3])
  } else {
    I_S = (h/3) * (y[1] + 4*sum(y[seq(3, n-1, by = 2)])+ 2*sum(y[seq(2, n, by = 2)])+ y[n+1])
  }
  return(I_S)
}


# Posterior Probability that 2 <= mu <= 8

# n=50
data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(Riemann(2, 8, n=50,f=posterior),trapezoid(2, 8, n=50,f=posterior), 
             Simpson(2, 8, n=50,f=posterior)))

# n=100
data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(Riemann(2, 8, n=100,f=posterior),trapezoid(2, 8, n=100,f=posterior), 
             Simpson(2, 8, n=100,f=posterior)))

# n=1000
data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(Riemann(2, 8, n=10^3,f=posterior),trapezoid(2, 8, n=10^3,f=posterior), 
             Simpson(2, 8, n=10^3,f=posterior)))

```

\

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q1_C.PNG)\

#### With the given $\upsilon$ , $\mu$ is transformed into log($\upsilon$ / (1-$\upsilon$)) for $\upsilon$ ranged from exp(3)/(1+exp(3)) to 1. The results show all methods estimate to the correct answer 0.99086. \

```{r 1c1}

# mu = log(u/(1-u)), exp(3)/(1 + exp(3)) < u < 1 
# dmu= derivative of log(u/(1-u)) = 1/(u*(1-u)

posterior <- function(u) { f_likelihood(log(u/(1-u))) * f_mu(log(u/(1-u))) * k_Riemann* (1/(u*(1-u)))}

data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(Riemann(exp(3)/(1 + exp(3)), 0.999999999, n=10^4,f=posterior),
                    trapezoid(exp(3)/(1 + exp(3)), 0.999999999, n=10^4,f=posterior), 
                    Simpson(exp(3)/(1 + exp(3)), 0.999999999, n=10^4,f=posterior)))



```

#### \


![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q1_D.PNG) \

#### With the given $\upsilon$ , $\mu$ was transformed into 1/$\upsilon$  for 0< $\upsilon$ < 1/3, and the estimates are same as good as 0.99086. 

```{r 1d}
# mu = 1/u, 0 < u < 1/3 
# dmu= derivative of 1/u = -1/u^2

posterior <- function(u) { f_likelihood(1/u) * f_mu(1/u) * k_Riemann* (-1/u^2)}

data.frame(Rule=c("Riemann","Trapezoid","Simpson"),
           result=c(Riemann(1/3,1-0.999999999, n=10^4,f=posterior),
                    trapezoid(1/3,1-0.999999999, n=10^4,f=posterior), 
                    Simpson(1/3,1-0.999999999, n=10^4,f=posterior)))

```


\newpage

## problem 2 


![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q2_1.PNG)

#### When it is assumed that a=exp(1), the E{Y}=log(a)=1. Using Romberg integration with m=6, the array converges to the true estimate 1. For this simple estimate case smaller m such as 4 still seems to work. For other complicated density function m may need to be increased accordingly.\


```{r 2a}

# E(Y) when a=exp(1)
set.seed(12345)
exp_y=function(a) {
x = runif(10^6, 1, a)
y = (a-1)/x
mean(y)
}

exp_y(a=exp(1))

# Compute Trapezoidal approximations starting with n=2 

trapezoid = function(a, n) {
  h = (a - 1)/n
  x = seq(1, a, by = h)
  y = 1/x
  result = h/2 *(y[1] + y[n+1])+ h*(sum(y[2:n])) 
  return(result)
}


R1k <-  function(k){trapezoid(exp(1),k)}


R_ik <- function(m){
  R = matrix(NA, m, m)
  R[1,1]=(1/exp(1)+1)*(exp(1)-1)/2  
  for (r in 2:m) {
    R[r,1] = R1k(2^(r-1))  # Trapezoid (n=2)
  for (c in 2:r) {R[r,c]=(4^(c-1)*R[r,c-1]-R[r-1,c-1])/(4^(c-1)-1)}
  }
  array=R[m,m]
  return(list(R,array))
}


R_ik(6)

```

   
   

\newpage

## problem 3 

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q3.PNG)

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/table_5_8.PNG)\

#### The plot between nodes and weights from Gauss-Legendre quadrature were drawn using table 5.8, and the curve looks like a quadratic function. The area under this curve was calculated by taking the sum of the product of each point's node and weight which is 0.666667 (=~ 2/3). The integral of a qudratic function x^2 is 2/3 from -1 to 1 which is same as the Gauss-Legendre quadrature result.  


```{r 3a}

# table5.8_ Nodes adn Weights for 10 point Gauss-Legendre quadrature on range [-1,1]

nodes = c(-0.148874338981631, 0.148874338981631, -0.433395394129247, 0.433395394129247,           -0.679409568299024, 0.679409568299024, -0.865063366688985, 0.865063366688985,           -0.973906528517172, 0.973906528517172) 
weights = c(0.295524224714753, 0.295524224714753, 0.269266719309996, 0.269266719309996,             0.219086362515982, 0.219086362515982, 0.149451394150581, 0.149451394150581,             0.066671344308688, 0.066671344308688) 

#Plot with spline line
 plot(nodes,weights,xlab="Nodes",ylab="Weights",pch=3) 
 lines(spline(nodes,weights, n = 20), col = 2)

 
 # Area f(x)=x^2 where x in [-1,1]
 # F(x)=x^3/3 = 2/3
 f_x2=2/3
 f_x2
 
 #Area of exact answer
 f<- nodes^2
 area_exact<-sum(f*weights)
 area_exact
 
```

\newpage

## problem 4

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_a.PNG)

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/4_a_hk.png)



![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_b.PNG)

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/4_b1_hk.PNG)
![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/4_b2_hk.PNG)


![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_c.PNG)

```{r 4c_1}

#Plot H5(x)
x <- seq(-3,3, by=0.01) 
H5<- 1/sqrt(120*sqrt(2*pi))*(x^5-10*x^3+15*x)

plot(x,H5,type='l')
abline(h=0,lty=2)

```

#### The five roots found by Newton Raphson method are used as nodes. 

```{r 4c_2}

# Newton Rapson to find the five roots

NR=function(x,s,toler=1e-6){      
  startvalue=s;
  n=length(x);
  thetahatcurr=startvalue;
  iter=1;
  #ftn=H5
  ftn=1/sqrt(120*sqrt(2*pi))*(thetahatcurr^5-10*thetahatcurr^3+15*thetahatcurr)
  
  while(abs(ftn)>toler){
    # Compute the derivative of H5
    dftn=1/sqrt(120*sqrt(2*pi))*(5*thetahatcurr^4-30*thetahatcurr^2+15)
    # Newton's method update of estimate of theta
    thetahatnew=thetahatcurr-ftn/dftn;
    thetahatcurr=thetahatnew;

    ftn=1/sqrt(120*sqrt(2*pi))*(thetahatcurr^5-10*thetahatcurr^3+15*thetahatcurr)
   
  }
  return(thetahatcurr);
}

data.frame(point=c(1,2,3,4,5), 
           root=c(
                NR(x,s=-3,toler=1e-6),
                NR(x,s=-2,toler=1e-6),
                NR(x,s=0,toler=1e-10),
                NR(x,s=1,toler=1e-6),
                NR(x,s=3,toler=1e-6) ))
           

```
\

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_d.PNG)

#### Using the below properties explained in the text book (Givens and Hoeting, 2nd ed.p144) the quadrature weights were calculated. After calculating Ai below in #2, the weights were obtained by taking the ratio of them (Ai/sum of all Ais) with i=0,...m to make the sum of the product as 1 as in #3 in the text book process below. For this example 5-point GH quadrature example, m=4. So, Cm+2 for example means C6 which is H6(X) which is given as 1/sqrt(720*sqrt(pi)). Pm(x) is the recurrence form for orthogonal polynomials. \

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/4_d2.PNG)


```{r 4d_1}

# Find the quadrature weights
# P7(x)=

Weight <- function(x) {
  
  C5=1/sqrt(120*sqrt(2*pi))
  C6=1/sqrt(720*sqrt(2*pi))
  
  dP5= 5*x^4 -30*x^2 +15    # P'5, the derivative of 5 point polynomial
  P6= x^6 -15*x^4 +45*x^2 -15
  
  Ai= -C6/(C5*P6*dP5)
  
  return(Ai)
} 

# Nodes
n1=NR(x,s=-3,toler=1e-6)
n2=NR(x,s=-2,toler=1e-6)
n3=NR(x,s=0,toler=1e-10)
n4=NR(x,s=1,toler=1e-6)
n5=NR(x,s=3,toler=1e-6)

Ai=c(Weight(n1),Weight(n2),Weight(n3),Weight(n4),Weight(n5))

sum_of_weight=sum(Weight(n1),Weight(n2),Weight(n3),Weight(n4),Weight(n5))           

# To get the sum of the product weight*nodes as 1, obtain the ratio of the above raw weights.

weights=c(Weight(n1)/sum_of_weight,Weight(n2)/sum_of_weight,
               Weight(n3)/sum_of_weight,Weight(n4)/sum_of_weight,Weight(n5)/sum_of_weight)
nodes=c(n1,n2,n3,n4,n5)

data.frame(Ai=Ai,Weight=weights,Nodes=nodes)


```

#### The plots shows that weight goes up as nodes approach to 0 from eigher negative and positive direction and it is symmetrically assigned from -3 to 3. \

```{r 4_d2, echo=FALSE}
plot(nodes,weights, main="Weights and Nodes")
```


![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_e.PNG)\

![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_e1.PNG)\
![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_e2.PNG)\
![](C:/Users/hkim288/Documents/PhD program/Computational Stat Fall 2020/HW5/q4_e3.PNG)\


#### Using the equations derived above, the variance of mu was calculated as 8.378. 

```{r 4_e}

# Find 1/C = F(x_bar)= Integral of f(xbar|mu)*f(mu)

C_rec = sum(8/sqrt(pi^3)*1/(64+(sqrt(10)*nodes+3)^2)*weights)
C_rec

# E(MU|Xbar)

emu_bar= 1/C_rec*8/sqrt(pi^3)*sum((47-sqrt(10)*nodes)*1/(64+(sqrt(10)*nodes+3)^2)*weights)
emu_bar

# E(MU^2|Xbar)

emu2_bar= 1/C_rec*8/sqrt(pi^3)*sum((47-sqrt(10)*nodes)^2*1/(64+(sqrt(10)*nodes+3)^2)*weights)
emu2_bar

# Variance of Mu

var_mu= emu2_bar-emu_bar^2
var_mu

```


